# -*- coding: utf-8 -*-
"""Heart Disease Risk Indicators Workshop Session 1 Exploratory Analysis in python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ii16C36Sb0xkQOr7VZVD5q5axcV2jA5I

# **Key Indicators of Heart Disease (2020 annual CDC survey data of 400k adults related to their health status)**
data:https://www.kaggle.com/datasets/kamilpytlak/personal-key-indicators-of-heart-disease

Data size: approximately 400 thousand adults in the US, features:

HeartDisease: Respondents that have ever reported having coronary heart disease (CHD) or myocardial infarction (MI)

BMI: Body Mass Index (BMI)

Smoking: Have you smoked at least 100 cigarettes in your entire life? [Note: 5 packs = 100 cigarettes]

AlcoholDrinking: Heavy drinkers (adult men having more than 14 drinks per week and adult women having more than 7 drinks per week

Stroke: (Ever told) (you had) a stroke?

PhysicalHealth: Now thinking about your physical health, which includes physical illness and injury, for how many days during the past 30 days was your physical health not good? (0-30 days)

MentalHealth: Thinking about your mental health, for how many days during the past 30 days was your mental health not good? (0-30 days)

DiffWalking: Do you have serious difficulty walking or climbing stairs? Sex: Are you male or female?

AgeCategory: Fourteen-level age category
"""

## Load modules and libraries
import numpy as np
import pandas as pd

## Datalink
datalink = 'https://raw.githubusercontent.com/elabrodsky/tulanemba/main/heart_2020_cleaned.csv'

## Load data
df = pd.read_table(datalink, sep=',', header=(0))

## Display first few lines of the data
df.head()

pd.read_table(datalink, sep=',', header=(0))

df.shape

df.info()

"""#Numerical exploratory data analysis

#Column Data Types
"""

# How may numerical columns in the data
df.info()

"""##Statistical summary of numerical columns"""

# summary of data
df.describe()

"""## Make the statistical summary presentable"""

df.describe()[:][['BMI','PhysicalHealth','MentalHealth', 'SleepTime']].T

# Summary of data, leave out count, transpose, and beautify the output
df.describe()[1:][['BMI','PhysicalHealth','MentalHealth', 'SleepTime']].T.style.background_gradient(cmap='Reds')

"""## Summary of categorical columns
Cound the number of YES and NO in each of the respective columns
"""

# Count the numbero of yes and no in columns
df['HeartDisease'].value_counts()
#df['HeartDisease'].value_counts().sum()

# Count the numbero of yes and no in columns
df['GenHealth'].value_counts()
df['Race'].value_counts()

print('Heart Disease stats in this data: \n')
print(df['HeartDisease'].value_counts()/df['HeartDisease'].value_counts().sum())

## Compile the percentage of yes and no in each columns
print('Heart Disease stats in this data: \n')
print(df['HeartDisease'].value_counts()/df['HeartDisease'].value_counts().sum())
print('\n')
print('Smoking stats in this data: \n')
print(df['Smoking'].value_counts()/df['Smoking'].value_counts().sum())
print('\n')
print('Alcohol Drinking stats in this data: \n')
print(df['AlcoholDrinking'].value_counts()/df['AlcoholDrinking'].value_counts().sum())
print('\n')
print('Stroke stats in this data: \n')
print(df['Stroke'].value_counts()/df['Stroke'].value_counts().sum())
print('\n')
print('Sex stats in this data: \n')
print(df['Sex'].value_counts()/df['Sex'].value_counts().sum())
print('\n')

"""## Summary of different factors and their association with heart diseases
Two factor associations
"""

pd.crosstab(df['HeartDisease'], df['Smoking'], margins=True)

pd.crosstab(df['HeartDisease'],
            df['Smoking'],
            margins=True).style.background_gradient(cmap='Reds')

"""### Normalize by row
How many of the Heart Disease patients have a smoking history?
"""

pd.crosstab(index=df['HeartDisease'],
            columns=df['Smoking'],
            margins=True, normalize = 'index')

pd.crosstab(index=df['HeartDisease'],
            columns=df['Smoking'],
            margins = True, normalize = 'index').style.format("{:.0%}").background_gradient(cmap='Reds', axis='index')

"""### Normalize by column
Whether heart disease is prevalent in smokers?
How many of the smokers contract heart disease?
"""

pd.crosstab(index=df['HeartDisease'],
            columns=df['Smoking'],
            margins=True, normalize = 'columns').style.format("{:.0%}").background_gradient(cmap='Reds', axis='columns')

"""### Two factor and multi-level associations

#### Is Heart diseases prevalent in smoking male or smoking female?
"""

pd.crosstab(index=df['HeartDisease'],
            columns=[df['Sex'],
                     df['Smoking']],
            margins=True, normalize = 'index').style.format("{:.0%}").background_gradient(cmap='Reds', axis='columns')

"""

```
# This is formatted as code
```

###Is Heart diseases prevalent in drinking male or drinking female?"""

pd.crosstab(index=df['HeartDisease'],
            columns=[df['Sex'],
                     df['AlcoholDrinking']],
            margins=True, normalize = 'index').style.format("{:.0%}").background_gradient(cmap='Reds', axis='columns')

"""### Is Stroke a risk factor for Heart disease in male vs female?"""

pd.crosstab(index=df['HeartDisease'],
            columns=[df['Sex'],
                     df['Stroke']],
            margins=True, normalize = 'index').style.format("{:.0%}").background_gradient(cmap='Reds', axis='columns')

pd.crosstab(index=df['HeartDisease'],
            columns=[df['Sex'],
                     df['Smoking'],
                     df['Stroke']],
            margins=True, normalize = 'index').style.format("{:.0%}").background_gradient(cmap='Reds', axis='columns')

"""#Exploratory data analysis: Visualization
In order to visulaize, convert the yes/no fields to numerical values by counting them.
"""

import pandas as pd
Cat_Num = pd.DataFrame()
Cat_Num['HeartDisease'] = pd.DataFrame(df['HeartDisease'].value_counts()/df['HeartDisease'].value_counts().sum())
Cat_Num['Smoking'] = pd.DataFrame(df['Smoking'].value_counts()/df['Smoking'].value_counts().sum())
Cat_Num['AlcoholDrinking'] = pd.DataFrame(df['AlcoholDrinking'].value_counts()/df['AlcoholDrinking'].value_counts().sum())
Cat_Num['Stroke'] = pd.DataFrame(df['Stroke'].value_counts()/df['Stroke'].value_counts().sum())

Cat_Num.style.format("{:.1%}")

pd.DataFrame(df['Smoking'].value_counts()/df['Smoking'].value_counts().sum())

df[df['HeartDisease'] == "Yes"]['Smoking'].value_counts()/df[df['HeartDisease'] == "Yes"]['Smoking'].value_counts().sum()

"""## Visualize the above data in Pie chart"""

import plotly.express as px

## Pie chart/Donut chart
fig = px.pie(values=(df[df['HeartDisease'] == "Yes"]['Smoking'].value_counts()/df[df['HeartDisease'] == "Yes"]['Smoking'].value_counts().sum()), names=Cat_Num.index, hole = 0.5)

fig.update_layout(
    title_text="Stats for Categorical Variables",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='Heart Disease for Smokers', x=0.5, y=0.5, font_size=15, showarrow=False)])

## Plot size
fig.update_layout(height=400, width=400)
fig.show()

import plotly.express as px

## Pie chart/Donut chart
fig = px.pie(values=Cat_Num['HeartDisease'], names=Cat_Num.index, hole = 0.5)

fig.update_layout(
    title_text="Stats for Categorical Variables",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='Heart Disease', x=0.5, y=0.5, font_size=15, showarrow=False)])

## Plot size
fig.update_layout(height=400, width=400)
fig.show()

import plotly.express as px

## Pie chart/Donut chart
fig = px.pie(values=Cat_Num['Smoking'], names=Cat_Num.index, hole = 0.5)
fig.update_layout(
    title_text="Stats for Categorical Variables",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='Smoking', x=0.5, y=0.5, font_size=15, showarrow=False)])

## Plot size
fig.update_layout(height=400, width=400)
fig.show()

"""#Convert all the fields/features to numerical data type"""

### convert data to numeric
from sklearn import preprocessing

## duplicate the dataframe
df_num = df

## Define age categories for user-defined encoding
encode_AgeCategory = {'55-59':57, '80 or older':80, '65-69':67,
                      '75-79':77,'40-44':42,'70-74':72,'60-64':62,
                      '50-54':52,'45-49':47,'18-24':21,'35-39':37,
                      '30-34':32,'25-29':27}

## Encode age category into respective numbers
df_num['AgeCategory'] = df_num['AgeCategory'].apply(lambda x: encode_AgeCategory[x])

## Convert the datatype to float
df_num['AgeCategory'] = df_num['AgeCategory'].astype('float')


## Define Health categories for user-defined encoding
encode_GenHealth = {'Poor':0, 'Fair':1, 'Good':2,
                      'Very good':3,'Excellent':4}

## Encode Health category
df_num['GenHealth'] = df_num['GenHealth'].apply(lambda x: encode_GenHealth[x])

## Convert the datatype to float
df_num['GenHealth'] = df_num['GenHealth'].astype('float')

## Integer encode columns with 2 unique values
for col in ['Smoking', 'AlcoholDrinking', 'Stroke', 'DiffWalking', 'Sex', 'PhysicalActivity', 'Asthma', 'KidneyDisease', 'SkinCancer']:
    if df[col].dtype == 'O':     ### select only columns with object datatype
        le = preprocessing.LabelEncoder()
        df_num[col] = le.fit_transform(df[col])

## One-hot encode columns with more than 2 unique values
## This will create multiple columns for Race with defined prefix
df_num = pd.get_dummies(df, columns=['Race', 'Diabetic'], prefix = ['Race', 'Diabetic'])

## Display the dataframe
df_num.head()

df['Race'].unique()

pd.get_dummies(df['Race']).head()

import plotly.express as px

## Duplicate to another dataframe
df_num1 = df_num

## Encode the Heart disease column as well
df_num1['HeartDisease'] = df_num1['HeartDisease'].map(dict(Yes=1, No=0))

## Plot plotly heatmap with correlation coefficient values
fig = px.imshow(df_num1[['HeartDisease', 'Smoking', 'AlcoholDrinking', 'Stroke', 'DiffWalking', 'Sex',
                    'PhysicalActivity', 'Asthma', 'KidneyDisease', 'SkinCancer','BMI', 'PhysicalHealth',
                    'MentalHealth', 'AgeCategory', 'SleepTime']].corr(),color_continuous_scale="Reds")
## Plot size
fig.update_layout(height=800)
fig.show()

"""#Principal component Analysis

Perform PCA for visual exploration of all data
"""

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

## Scale and center the data
scaled = StandardScaler()
scaled.fit(df_num1)
scaled_data = scaled.transform(df_num1)

#Run Principal Component Analysis
pca = PCA(n_components=3)
pca.fit(scaled_data)
xpca = pca.transform(scaled_data)

## Define the variance explained format for the components
PC1_label = "PC1 {}%".format(round((100*pca.explained_variance_ratio_[0]),2))
PC2_label = "PC2 {}%".format(round((100*pca.explained_variance_ratio_[1]),2))
PC3_label = "PC3 {}%".format(round((100*pca.explained_variance_ratio_[2]),2))

#create dataframe for PCA
df_pca = pd.DataFrame(xpca)
df_pca.columns = [PC1_label,PC2_label,PC3_label]

#visualize
import plotly.express as px
figPCA = px.scatter(df_pca,
                    x=PC1_label,
                    y=PC2_label,
                    title="PCA 2D plot",
                    color=df.HeartDisease,
                    template="plotly_white",
                    opacity=0.5,
                    height=800)

figPCA.update_traces(marker=dict(size=10, line=dict(width=2, color='Black')))
figPCA.show()

#visualize
import plotly.express as px
figPCA = px.scatter_3d(df_pca,
                    x=PC1_label,
                    y=PC2_label,
                    z=PC3_label,
                    title="PCA 3D plot",
                    color=df.HeartDisease,
                    template="plotly_white",
                    height=800)
figPCA.update_traces(marker=dict(size=10, line=dict(width=2, color='Black')))
figPCA.show()

"""Since we can see distinct clusters in the PCA, we will remove features creating such batches. In this case through elimination, the feature introducing such batches is 'Race_white'

(elimination was performed with binary features such as 'Sex', 'Asthma', 'Smoking', etc.)
"""

import matplotlib.pyplot as plt
import seaborn
plt.rcParams['figure.figsize'] = [10, 8]
seaborn.scatterplot(x=xpca[:,0], y=xpca[:,1], hue=df.HeartDisease)
plt.show()

import matplotlib.pyplot as plt
import seaborn
plt.rcParams['figure.figsize'] = [10, 8]
seaborn.scatterplot(x=xpca[:,0], y=xpca[:,1], hue=df_num1['Race_White'])
plt.show()

df_num1.shape

df_num1.columns

"""##Eliminate confounding factors"""

df_num1.iloc[:,0:21].columns

df_numX = df_num1.iloc[:,0:21]

#df_numX = df_num1
#del df_numX['Race_White']

scaled = StandardScaler()
scaled.fit(df_numX)
scaled_data = scaled.transform(df_numX)

#Run Principal Component Analysis
pca = PCA(n_components=3)
pca.fit(scaled_data)
xpca = pca.transform(scaled_data)

PC1_label = "PC1 {}%".format(round((100*pca.explained_variance_ratio_[0]),2))
PC2_label = "PC2 {}%".format(round((100*pca.explained_variance_ratio_[1]),2))
PC3_label = "PC3 {}%".format(round((100*pca.explained_variance_ratio_[2]),2))

#create dataframe for PCA
df_pca = pd.DataFrame(xpca)
df_pca.columns = [PC1_label,PC2_label,PC3_label]

df_numX.columns

import matplotlib.pyplot as plt
import seaborn
plt.rcParams['figure.figsize'] = [10, 8]
seaborn.scatterplot(x=xpca[:,0], y=xpca[:,1], hue=df.HeartDisease)
plt.show()

#visualize
import plotly.express as px
figPCA = px.scatter_3d(df_pca,
                    x=PC1_label,
                    y=PC2_label,
                    z=PC3_label,
                    title="PCA 3D plot",
                    color=df.HeartDisease,
                    template="plotly_white",
                    height=800)
figPCA.update_traces(marker=dict(size=10, line=dict(width=2, color='Black')))
figPCA.show()